{"version":3,"file":"react-map-gl-cluster.esm.js","sources":["../src/utils/point.js","../src/utils/shallowCompareChildren.js","../src/components/Cluster/index.js"],"sourcesContent":["// @flow\n\nconst point = (\n  coordinates: [number, number],\n  properties: { [string]: any } = {}\n) => ({\n  type: 'Feature',\n  properties,\n  geometry: {\n    type: 'Point',\n    coordinates\n  }\n});\n\nexport default point;\n","// @flow\n\nimport { Children } from 'react';\nimport type { Node } from 'react';\n\nconst childrenKeys = (children: Node): string[] =>\n  Children.toArray(children).map(child => child.key);\n\nconst shallowCompareChildren = (\n  prevChildren: Node,\n  newChildren: Node\n): boolean => {\n  if (Children.count(prevChildren) !== Children.count(newChildren)) {\n    return false;\n  }\n\n  const prevKeys = childrenKeys(prevChildren);\n  const newKeys = new Set(childrenKeys(newChildren));\n  return prevKeys.every(key => newKeys.has(key));\n};\n\nexport default shallowCompareChildren;\n","// @flow\n\nimport Supercluster from 'supercluster';\nimport { Children, PureComponent, createElement } from 'react';\nimport { MapContext } from '@urbica/react-map-gl';\nimport type MapboxMap from 'mapbox-gl/src/ui/map';\n\nimport point from '../../utils/point';\nimport shallowCompareChildren from '../../utils/shallowCompareChildren';\n\nexport type SuperclusterFeature = {\n  type: 'Feature',\n  id: number,\n  properties: {\n    cluster: true,\n    cluster_id: number,\n    point_count: number,\n    point_count_abbreviated: string | number\n  },\n  geometry: {\n    type: 'Point',\n    coordinates: [number, number]\n  }\n};\n\nexport type ClusterComponentProps = {\n  longitude: number,\n  latitude: number,\n  clusterId: number,\n  pointCount: number,\n  pointCountAbbreviated: string | number,\n  children: Array<mixed>,\n};\n\nexport type ClusterMapFunction = (props: {}) => any;\n\nexport type ClusterReduceFunction = (accumulated: {}, props: {}) => void;\n\nexport type ClusterComponent = React$Component<ClusterComponentProps, any>;\n\ntype Props = {\n  /** Minimum zoom level at which clusters are generated */\n  minZoom?: number,\n\n  /** Maximum zoom level at which clusters are generated */\n  maxZoom?: number,\n\n  /** Cluster radius, in pixels */\n  radius?: number,\n\n  /** (Tiles) Tile extent. Radius is calculated relative to this value */\n  extent?: number,\n\n  /** Size of the KD-tree leaf node. Affects performance */\n  nodeSize?: number,\n\n  /**\n   * A function that returns cluster properties\n   * corresponding to a single point.\n   *  */\n  // eslint-disable-next-line react/no-unused-prop-types\n  map?: ClusterMapFunction,\n\n  /** A reduce function that merges properties of two clusters into one. */\n  // eslint-disable-next-line react/no-unused-prop-types\n  reduce?: ClusterReduceFunction,\n\n  /** React Component for rendering Cluster */\n  component: Class<ClusterComponent>,\n\n  /** List of Markers */\n  children: React$Node\n};\n\ntype State = {\n  clusters: Array<Object>\n};\n\nclass Cluster extends PureComponent<Props, State> {\n  _map: MapboxMap;\n\n  _cluster: Object;\n\n  static displayName = 'Cluster';\n\n  static defaultProps = {\n    minZoom: 0,\n    maxZoom: 16,\n    radius: 40,\n    extent: 512,\n    nodeSize: 64\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      clusters: []\n    };\n  }\n\n  componentDidMount() {\n    this._createCluster(this.props);\n    this._recalculate();\n\n    this._map.on('moveend', this._recalculate);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const shouldUpdate =\n      prevProps.minZoom !== this.props.minZoom ||\n      prevProps.maxZoom !== this.props.maxZoom ||\n      prevProps.radius !== this.props.radius ||\n      prevProps.extent !== this.props.extent ||\n      prevProps.nodeSize !== this.props.nodeSize ||\n      !shallowCompareChildren(prevProps.children, this.props.children);\n\n    if (shouldUpdate) {\n      this._createCluster(this.props);\n      this._recalculate();\n    }\n  }\n\n  componentWillUnmount() {\n    if (!this._map || !this._map.getStyle()) {\n      return;\n    }\n\n    this._map.off('moveend', this._recalculate);\n  }\n\n  getCluster() {\n    return this._cluster;\n  }\n\n  _createCluster = (props: Props) => {\n    const {\n      minZoom,\n      maxZoom,\n      radius,\n      extent,\n      nodeSize,\n      children,\n      reduce,\n      map\n    } = props;\n\n    const cluster = new Supercluster({\n      minZoom,\n      maxZoom,\n      radius,\n      extent,\n      nodeSize,\n      reduce,\n      map\n    });\n\n    const points = Children.map(children, child =>\n      point([child.props.longitude, child.props.latitude], child)\n    );\n\n    cluster.load(points);\n    this._cluster = cluster;\n  };\n\n  _recalculate = () => {\n    const zoom = this._map.getZoom();\n    const bounds = this._map.getBounds().toArray();\n    const bbox = bounds[0].concat(bounds[1]);\n\n    const clusters = this._cluster.getClusters(bbox, Math.round(zoom));\n    this.setState(() => ({ clusters }));\n  };\n\n  _renderCluster = (cluster: SuperclusterFeature) => {\n    const [longitude, latitude] = cluster.geometry.coordinates;\n    const {\n      cluster_id: clusterId,\n      point_count: pointCount,\n      point_count_abbreviated: pointCountAbbreviated\n    } = cluster.properties;\n\n    return createElement(this.props.component, {\n      longitude,\n      latitude,\n      clusterId,\n      pointCount,\n      pointCountAbbreviated,\n      children: this.children,\n      key: `cluster-${cluster.properties.cluster_id}`\n    });\n  };\n\n  render() {\n    return createElement(MapContext.Consumer, {}, (map) => {\n      if (map) {\n        this._map = map;\n      }\n\n      if (this.state.clusters.length === 0) {\n        return null;\n      }\n\n      const clusters = this.state.clusters.map((cluster) => {\n        if (cluster.properties.cluster) {\n          return this._renderCluster(cluster);\n        }\n        const { type, key, props } = cluster.properties;\n        return createElement(type, { key, ...props });\n      });\n\n      return clusters;\n    });\n  }\n}\n\nexport default Cluster;\n"],"names":["childrenKeys","children","Children","toArray","map","child","key","Cluster","props","minZoom","maxZoom","radius","extent","nodeSize","reduce","cluster","Supercluster","points","coordinates","longitude","latitude","properties","type","geometry","load","_cluster","zoom","_this","_map","getZoom","bounds","getBounds","bbox","concat","clusters","getClusters","Math","round","setState","clusterId","cluster_id","pointCount","point_count","pointCountAbbreviated","point_count_abbreviated","createElement","component","state","componentDidMount","_createCluster","this","_recalculate","on","componentDidUpdate","prevProps","prevChildren","newChildren","count","prevKeys","newKeys","Set","every","has","shallowCompareChildren","componentWillUnmount","getStyle","off","getCluster","render","MapContext","Consumer","_this2","length","_renderCluster","PureComponent"],"mappings":"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"}